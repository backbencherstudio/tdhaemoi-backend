// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String?
  email       String       @unique
  password    String
  image       String?
  role        Role         @default(ADMIN)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt
  suggestions Suggestion[]
  messages    Messages[]
  accounta    Account[]

  @@map("users")
}

model Account {
  id            String    @id @default(uuid())
  expires_at    DateTime?
  user_id       String
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token         String?
}

model ucode {
  id         String   @id @default(uuid())
  otp        String
  name       String?
  email      String   @unique
  expired_at DateTime
  createdAt  DateTime @default(now())
}

model Product {
  id              String   @id @default(uuid())
  name            String?
  brand           String?
  Category        String?
  Sub_Category    String?
  typeOfShoes     String?
  productDesc     String?
  price           Float?
  availability    Boolean?
  offer           Float?
  size            Json?
  feetFirstFit    String?
  footLength      String?
  technicalData   String?
  characteristics Int[]
  Company         String?
  gender          Gender?
  question        Json?
  colors          Color[]
  createdAt       DateTime @default(now())
}

model Color {
  id        String  @id @default(uuid())
  colorName String
  colorCode String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  images    Image[]
}

model Image {
  id      String @id @default(uuid())
  url     String
  color   Color  @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId String
}

model appointment {
  id            String   @id @default(uuid())
  customer_name String
  time          DateTime
  date          DateTime
  reason        String
}

model Suggestion {
  id         String @id @default(uuid())
  name       String
  email      String
  phone      String
  suggestion String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Messages {
  id        String   @id @default(uuid())
  email     String
  subject   String
  message   String
  favorite  Boolean
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum Role {
  ADMIN
  USER
  PARTNER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}
