generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  name                   String?
  email                  String                  @unique
  password               String
  image                  String?
  role                   Role                    @default(ADMIN)
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt
  suggestions            SuggestionFeetf1rst[]
  sentMessages           Message[]               @relation("sent_messages")
  receivedMessages       Message[]               @relation("received_messages")
  accounta               account[]
  appointments           appointment[]
  improvementSuggestions ImprovementSuggestion[]
  messageVisibility      MessageVisibility[]

  @@map("users")
}

model account {
  id         String    @id @default(uuid())
  expires_at DateTime?
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token      String?
}

model ucode {
  id         String   @id @default(uuid())
  otp        String
  name       String?
  email      String   @unique
  expired_at DateTime
  createdAt  DateTime @default(now())
}

model Product {
  id              String   @id @default(uuid())
  name            String?
  brand           String?
  Category        String?
  Sub_Category    String?
  typeOfShoes     String?
  productDesc     String?
  price           Float?
  availability    Boolean?
  offer           Float?
  size            Json?
  feetFirstFit    String?
  footLength      String?
  technicalData   String?
  characteristics Int[]
  Company         String?
  gender          Gender?
  question        Json?
  colors          Color[]
  createdAt       DateTime @default(now())

  @@index([id, name])
}

model Color {
  id        String  @id @default(uuid())
  colorName String
  colorCode String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  images    Image[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId   String
  createdAt DateTime @default(now())
}

model appointment {
  id            String   @id @default(uuid())
  customer_name String
  time          String
  date          DateTime
  reason        String
  assignedTo    String
  details       String
  isClient      Boolean?
  userId        String
  customerId    String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@map("appointment")
}

model SuggestionFeetf1rst {
  id String @id @default(uuid())

  reason     String
  name       String
  phone      String
  suggestion String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// name, email, firma, phone, suggestion
model ImprovementSuggestion {
  id         String @id @default(uuid())
  name       String
  email      String
  firma      String
  phone      String
  suggestion String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model Message {
  id             String              @id @default(uuid())
  subject        String
  content        String
  senderId       String
  sender         User                @relation("sent_messages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId    String?
  recipient      User?               @relation("received_messages", fields: [recipientId], references: [id], onDelete: SetNull)
  recipientEmail String // For non-registered recipients
  isFavorite     Boolean             @default(false)
  isDeleted      Boolean             @default(false)
  recipientType  RecipientType?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  visibilities   MessageVisibility[]

  @@index([senderId])
  @@index([recipientId])
  @@map("messages")
}

enum RecipientType {
  USER
  CUSTOMER
  EXTERNAL
}

model MessageVisibility {
  id         String   @id @default(uuid())
  messageId  String
  userId     String
  isDeleted  Boolean  @default(false)
  isFavorite Boolean  @default(false)
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([messageId, userId])
  @@map("message_visibilities")
}

enum Role {
  ADMIN
  USER
  PARTNER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

//-------------------------------------------------

model Employees {
  id              String  @id @default(uuid())
  accountName     String
  employeeName    String
  email           String  @unique
  password        String
  financialAccess Boolean @default(false)

  createdBy String
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Versorgungen {
  id                String @id @default(uuid())
  name              String
  rohlingHersteller String
  artikelHersteller String
  versorgung        String
  material          String
  langenempfehlung  Json

  status           versorgungenStatus
  diagnosis_status versorgungenDiagnosisStatus?

  createdBy String
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, name])
}

enum versorgungenStatus {
  Alltagseinlagen
  Sporteinlagen
  Businesseinlagen
}

enum versorgungenDiagnosisStatus {
  HAMMERZEHEN_KRALLENZEHEN
  MORTON_NEUROM
  FUSSARTHROSE
  STRESSFRAKTUREN_IM_FUSS
  DIABETISCHES_FUSSSYNDROM
  HOHLFUSS
  KNICKFUSS
  KNICK_SENKFUSS
  HALLUX_VALGUS
  HALLUX_RIGIDUS
  PLANTARFASZIITIS
  FERSENSPORN
  SPREIZFUSS
  SENKFUSS
  PLATTFUSS
}

model customers {
  id             String  @id @default(uuid())
  customerNumber Int     @unique @default(autoincrement())
  vorname        String
  nachname       String
  email          String  @unique
  telefonnummer  String?
  wohnort        String?

  screenerFile screener_file[]

  // this all data come form a single csv file
  fusslange1   String? //B58   (.csv)
  fusslange2   String? //C58   (.csv)
  fussbreite1  String? //B73   (.csv)
  fussbreite2  String? //C73   (.csv)
  kugelumfang1 String? //B102  (.csv)
  kugelumfang2 String? //C102  (.csv)
  rist1        String? //B105  (.csv)
  rist2        String? //C105  (.csv)
  zehentyp1    String? //B136  (.csv)
  zehentyp2    String? //C136  (.csv)
  archIndex1   String? //B120  (.csv)
  archIndex2   String? //C120  (.csv)

  createdBy String
  updatedBy String?

  // Relation to KundenHistorie
  customerHistorie customerHistorie[]

  // Relation to UserAnswer
  einlagenAnswers       einlagenAnswers[]
  versorgungen          customer_versorgungen[] @relation("customerVersorgungen")
  ausfuhrliche_diagnose String?

  kundeSteuernummer String? // Kunde Steuernummer
  diagnose          String? // Diagnose
  kodexeMassschuhe  String? // Kodexe Massschuhe
  kodexeEinlagen    String? // Kodexe Einlagen
  sonstiges         String? // Sonstiges

  fußanalyse        String? //ইনসোল $
  einlagenversorgung String? //Foot analysis $

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vorname, nachname])
  @@index([telefonnummer])
  @@index([wohnort])
  @@index([email])
  @@index([id, vorname])
  @@index([id, email])
}

model screener_file {
  id         String    @id @default(uuid())
  customerId String
  customer   customers @relation(fields: [customerId], references: [id], onDelete: Cascade)

  picture_10        String? //Fersenneigung left (image)
  picture_23        String? //Plantaransicht left (image)
  threed_model_left String? //3D-Model left   (.stl)
  picture_17        String? //Sohlen Index left (image)

  picture_11         String? //Fersenneigung right (image)
  picture_24         String? //Plantaransich right  (image)
  threed_model_right String? //3D-Model right   .stl
  picture_16         String? //Sohlen Index right   (image)
  csvFile            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([id])
  @@index([createdAt])
}

model customerHistorie {
  id         String        @id @default(uuid())
  customerId String
  customer   customers     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  category   EventCategory
  date       DateTime?

  url       String?
  methord   String?
  paymentIs String?
  eventId   String?

  note        String?
  system_note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([eventId])
  @@index([category])
}

enum EventCategory {
  Notizen //Notes
  Bestellungen //Orders
  Leistungen //Services
  Rechnungen //Invoices
  Zahlungen //Payments
  Emails //Emails
  Termin //Appointment
}

model customer_versorgungen {
  id                String                       @id @default(uuid())
  name              String
  rohlingHersteller String
  artikelHersteller String
  versorgung        String
  material          String
  langenempfehlung  Json
  status            versorgungenStatus
  diagnosis_status  versorgungenDiagnosisStatus?

  customerId String
  customer   customers @relation("customerVersorgungen", fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, status, diagnosis_status])
  @@index([id, name])
  @@index([customerId])
  @@index([status])
}

model einlagenAnswers {
  id         String           @id @default(uuid())
  customerId String
  customer   customers        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  category   QuestionCategory
  questionId String
  answer     Json

  @@unique([customerId, questionId])
  @@index([customerId])
  @@index([category])
  @@index([questionId])
}

enum QuestionCategory {
  BUSINESSEINLAGE
  ALLTAGSEINLAGE
  SPORTEINLAGE
}

// {
//   category: "BUSINESSEINLAGE",
//   userId: "123",
// answers: [
//   { questionId: 1, selected: "Sneaker" },
//   { questionId: 3, selected: "Wenig aktiv" },
//   { questionId: 4, selected: "Nein" },
//   { questionId: 6, selected: [
//     { questionId: 1, selected: "Seit mehreren Wochen" },
//     { questionId: 2, selected: "Ich kann keine längeren Strecken mehr gehen" },
//     { questionId: 3, selected: "Ziehend" },
//     { questionId: 4, selected: "Beim Barfußgehen" },
//   ]},
//  { questionId: 7, selected: "Ja, Rückenschmerzen" },
//  { questionId: 8, selected: "Ja, bitte angeben" }, 
//  { questionId: 9, selected: "Schwarz" }, 
// ]
// }

// https://chatgpt.com/share/688ca13d-c468-800c-8159-f0c30dccecbf8
