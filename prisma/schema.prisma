// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  name                   String?
  email                  String                  @unique
  password               String
  image                  String?
  role                   Role                    @default(ADMIN)
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt
  suggestions            SuggestionFeetf1rst[]
  messages               Messages[]
  accounta               account[]
  appointments           appointment[]
  improvementSuggestions ImprovementSuggestion[]

  @@map("users")
}

model account {
  id         String    @id @default(uuid())
  expires_at DateTime?
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token      String?
}

model ucode {
  id         String   @id @default(uuid())
  otp        String
  name       String?
  email      String   @unique
  expired_at DateTime
  createdAt  DateTime @default(now())
}

model Product {
  id              String   @id @default(uuid())
  name            String?
  brand           String?
  Category        String?
  Sub_Category    String?
  typeOfShoes     String?
  productDesc     String?
  price           Float?
  availability    Boolean?
  offer           Float?
  size            Json?
  feetFirstFit    String?
  footLength      String?
  technicalData   String?
  characteristics Int[]
  Company         String?
  gender          Gender?
  question        Json?
  colors          Color[]
  createdAt       DateTime @default(now())
}

model Color {
  id        String  @id @default(uuid())
  colorName String
  colorCode String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  images    Image[]
}

model Image {
  id      String @id @default(uuid())
  url     String
  color   Color  @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId String

  createdAt DateTime @default(now())
}

model appointment {
  id            String   @id @default(uuid())
  customer_name String
  time          String
  date          DateTime
  reason        String
  assignedTo    String
  details       String
  isClient      Boolean
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("appointment")
}

model SuggestionFeetf1rst {
  id         String @id @default(uuid())
  name       String
  email      String
  phone      String
  suggestion String
  firma      String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ImprovementSuggestion {
  id         String @id @default(uuid())
  name       String
  email      String
  phone      String
  suggestion String
  firma      String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Messages {
  id           String  @id @default(uuid())
  email        String
  subject      String
  message      String
  favorite     Boolean
  recipient_id String
  userId       String?
  user         User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  PARTNER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}
